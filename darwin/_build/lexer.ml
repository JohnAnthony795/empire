# 3 "lexer.mll"
         
        open Parser        (* The type token is defined in parser.mli *)
	open Types
        exception Eof

	let dir_of_code s = match s with
		 "U" -> Up
		|"D" -> Down
		|"R" -> Right
		|"L" -> Left
		|"UL" -> Upleft
		|"DR" -> Downright

	let unite_of_code s = match s with
		 'A' -> ARMY
		|'T' -> TRANSPORT
		|'F' -> FIGHT
		|'B' -> BATTLESHIP
		|'P' -> PATROL

	let comp_of_code s = match s with
		  "<" -> Inf 
		| ">" -> Sup
		| "=" -> Eq  
		| "<=" -> InfEq  
		| ">=" -> SupEq  
        
# 30 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\236\255\237\255\002\000\000\000\001\000\005\000\243\255\
    \006\000\003\000\244\255\003\000\011\000\245\255\041\000\247\255\
    \248\255\249\255\250\255\251\255\252\255\253\255\254\255\255\255\
    \014\000\008\000\009\000\001\000\242\255\021\000\241\255\240\255\
    \022\000\239\255\238\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\019\000\019\000\019\000\019\000\255\255\
    \012\000\012\000\255\255\011\000\011\000\255\255\009\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\000\000\255\255\255\255\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\000\000\255\255\000\000\000\000\
    \255\255\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\023\000\022\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \023\000\015\000\000\000\021\000\000\000\000\000\000\000\000\000\
    \019\000\018\000\000\000\000\000\020\000\000\000\000\000\000\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\017\000\000\000\012\000\010\000\011\000\016\000\
    \010\000\013\000\013\000\032\000\008\000\003\000\013\000\024\000\
    \010\000\029\000\027\000\000\000\007\000\005\000\006\000\007\000\
    \013\000\028\000\007\000\004\000\013\000\009\000\034\000\031\000\
    \007\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\026\000\025\000\030\000\033\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\000\000\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\255\255\000\000\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \011\000\000\000\000\000\004\000\000\000\000\000\000\000\006\000\
    \012\000\025\000\026\000\255\255\000\000\000\000\000\000\009\000\
    \000\000\027\000\000\000\000\000\000\000\000\000\003\000\005\000\
    \008\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\024\000\024\000\029\000\032\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 32 "lexer.mll"
                             ( token lexbuf )
# 149 "lexer.ml"

  | 1 ->
# 33 "lexer.mll"
                             ( EOL  )
# 154 "lexer.ml"

  | 2 ->
# 34 "lexer.mll"
                      ( HASH )
# 159 "lexer.ml"

  | 3 ->
# 35 "lexer.mll"
                             ( VIRG )
# 164 "lexer.ml"

  | 4 ->
# 36 "lexer.mll"
                             ( LPAREN )
# 169 "lexer.ml"

  | 5 ->
# 37 "lexer.mll"
                             ( RPAREN )
# 174 "lexer.ml"

  | 6 ->
# 38 "lexer.mll"
                      ( COLON )
# 179 "lexer.ml"

  | 7 ->
# 39 "lexer.mll"
                      ( QMARK )
# 184 "lexer.ml"

  | 8 ->
# 40 "lexer.mll"
                      ( EMARK )
# 189 "lexer.ml"

  | 9 ->
let
# 41 "lexer.mll"
                   nb
# 195 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 41 "lexer.mll"
                      ( INT(int_of_string nb) )
# 199 "lexer.ml"

  | 10 ->
let
# 42 "lexer.mll"
                              unite
# 205 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 42 "lexer.mll"
                                    ( UNITE(unite_of_code unite))
# 209 "lexer.ml"

  | 11 ->
let
# 43 "lexer.mll"
                                comp
# 215 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 43 "lexer.mll"
                                     ( COMP(comp_of_code comp))
# 219 "lexer.ml"

  | 12 ->
let
# 44 "lexer.mll"
                                    dir
# 225 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 44 "lexer.mll"
                                        ( DIR(dir_of_code dir))
# 229 "lexer.ml"

  | 13 ->
# 47 "lexer.mll"
                      ( NBUAP )
# 234 "lexer.ml"

  | 14 ->
# 48 "lexer.mll"
                      ( NBVAP )
# 239 "lexer.ml"

  | 15 ->
# 51 "lexer.mll"
                ( MV )
# 244 "lexer.ml"

  | 16 ->
# 52 "lexer.mll"
                      ( SCP )
# 249 "lexer.ml"

  | 17 ->
# 53 "lexer.mll"
                      ( ET )
# 254 "lexer.ml"

  | 18 ->
# 55 "lexer.mll"
                             ( raise Eof )
# 259 "lexer.ml"

  | 19 ->
# 56 "lexer.mll"
                      ( token lexbuf )
# 264 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

