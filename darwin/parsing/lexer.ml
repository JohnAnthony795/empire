# 3 "lexer.mll"
         
        open Parser        (* The type token is defined in parser.mli *)
	open Types
        exception Eof

	let dir_of_code s = match s with
		 "U" -> Up
		|"D" -> Down
		|"R" -> Right
		|"L" -> Left
		|"UL" -> Upleft
		|"DR" -> Downright

	let unite_of_code s = match s with
		 "A" -> ARMY
		|"T" -> TRANSPORT
		|"F" -> FIGHT
		|"B" -> BATTLESHIP
		|"P" -> PATROL

	let comp_of_code s = match s with
		  "<" -> Inf 
		| ">" -> Sup
		| "=" -> Eq  
		| "<=" -> InfEq  
		| ">=" -> SupEq  
        
# 30 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\237\255\000\000\000\000\000\000\000\000\243\255\005\000\
    \003\000\244\255\003\000\004\000\023\000\060\000\247\255\248\255\
    \249\255\250\255\251\255\252\255\253\255\254\255\255\255\000\000\
    \001\000\002\000\003\000\004\000\245\255\005\000\005\000\006\000\
    \000\000\242\255\001\000\241\255\240\255\012\000\239\255\238\255\
    ";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\012\000\
    \012\000\255\255\011\000\011\000\255\255\009\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_default = 
   "\255\255\000\000\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\000\000\255\255\000\000\000\000\255\255\000\000\000\000\
    ";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\022\000\021\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \022\000\014\000\000\000\020\000\000\000\000\000\000\000\000\000\
    \018\000\017\000\000\000\000\000\019\000\000\000\000\000\000\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\016\000\000\000\011\000\009\000\010\000\015\000\
    \009\000\009\000\029\000\037\000\007\000\002\000\034\000\032\000\
    \000\000\000\000\000\000\000\000\006\000\004\000\005\000\006\000\
    \033\000\035\000\006\000\003\000\039\000\008\000\036\000\006\000\
    \027\000\024\000\031\000\030\000\038\000\025\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\023\000\
    \000\000\000\000\000\000\026\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\000\000\000\000\
    \000\000\000\000\000\000\012\000\000\000\028\000\028\000\028\000\
    \028\000\028\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\000\000\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\255\255\000\000\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \010\000\011\000\005\000\003\000\000\000\000\000\030\000\031\000\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\008\000\
    \032\000\034\000\000\000\000\000\002\000\000\000\004\000\007\000\
    \012\000\012\000\029\000\029\000\037\000\012\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\012\000\
    \255\255\255\255\255\255\012\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\023\000\024\000\025\000\
    \026\000\027\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 32 "lexer.mll"
                             ( token lexbuf )
# 156 "lexer.ml"

  | 1 ->
# 33 "lexer.mll"
                             ( EOL  )
# 161 "lexer.ml"

  | 2 ->
# 34 "lexer.mll"
                      ( HASH )
# 166 "lexer.ml"

  | 3 ->
# 35 "lexer.mll"
                             ( VIRG )
# 171 "lexer.ml"

  | 4 ->
# 36 "lexer.mll"
                             ( LPAREN )
# 176 "lexer.ml"

  | 5 ->
# 37 "lexer.mll"
                             ( RPAREN )
# 181 "lexer.ml"

  | 6 ->
# 38 "lexer.mll"
                      ( COLON )
# 186 "lexer.ml"

  | 7 ->
# 39 "lexer.mll"
                      ( QMARK )
# 191 "lexer.ml"

  | 8 ->
# 40 "lexer.mll"
                      ( EMARK )
# 196 "lexer.ml"

  | 9 ->
let
# 41 "lexer.mll"
                   nb
# 202 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 41 "lexer.mll"
                      ( INT(int_of_string nb) )
# 206 "lexer.ml"

  | 10 ->
let
# 42 "lexer.mll"
                                        unite
# 212 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 3) in
# 42 "lexer.mll"
                                              ( UNITE(unite_of_code unite))
# 216 "lexer.ml"

  | 11 ->
let
# 43 "lexer.mll"
                                comp
# 222 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 43 "lexer.mll"
                                     ( COMP(comp_of_code comp))
# 226 "lexer.ml"

  | 12 ->
let
# 44 "lexer.mll"
                                    dir
# 232 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 44 "lexer.mll"
                                        ( DIR(dir_of_code dir))
# 236 "lexer.ml"

  | 13 ->
# 47 "lexer.mll"
                      ( NBUAP )
# 241 "lexer.ml"

  | 14 ->
# 48 "lexer.mll"
                      ( NBVAP )
# 246 "lexer.ml"

  | 15 ->
# 51 "lexer.mll"
                ( MV )
# 251 "lexer.ml"

  | 16 ->
# 52 "lexer.mll"
                      ( SCP )
# 256 "lexer.ml"

  | 17 ->
# 53 "lexer.mll"
                      ( ET )
# 261 "lexer.ml"

  | 18 ->
# 55 "lexer.mll"
                             ( raise Eof )
# 266 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

